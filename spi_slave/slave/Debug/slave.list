
slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  4 .ARM          00000000  080004d0  080004d0  000104d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d0  080004d8  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d0  080004d0  000104d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  080004d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  080004d8  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000916  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000194  00000000  00000000  00010e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00010fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001895e  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005b0  00000000  00000000  000299ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab92  00000000  00000000  00029f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  000b4b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004b8 	.word	0x080004b8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004b8 	.word	0x080004b8

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	; (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <DMA1_Stream2_IRQHandler>:
#include "stm32f446xx.h"

uint16_t rx_buff[10], tx_buff[10] = {0};

void DMA1_Stream2_IRQHandler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
	while(SPI3->SR & SPI_SR_BSY);
 8000246:	bf00      	nop
 8000248:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000250:	2b00      	cmp	r3, #0
 8000252:	d1f9      	bne.n	8000248 <DMA1_Stream2_IRQHandler+0x8>

	SPI3->CR1 &= ~SPI_CR1_SPE;
 8000254:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a23      	ldr	r2, [pc, #140]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 800025a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800025e:	6013      	str	r3, [r2, #0]

	SPI3->CR2 &= ~(SPI_CR2_RXDMAEN |
 8000260:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a20      	ldr	r2, [pc, #128]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 8000266:	f023 0303 	bic.w	r3, r3, #3
 800026a:	6053      	str	r3, [r2, #4]
				   SPI_CR2_TXDMAEN);

	DMA1->LIFCR = DMA_LIFCR_CHTIF2 |
 800026c:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <DMA1_Stream2_IRQHandler+0xac>)
 800026e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000272:	609a      	str	r2, [r3, #8]
				  DMA_LIFCR_CTCIF2;

	DMA1->HIFCR = DMA_HIFCR_CHTIF5 |
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <DMA1_Stream2_IRQHandler+0xac>)
 8000276:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800027a:	60da      	str	r2, [r3, #12]
				  DMA_HIFCR_CTCIF5;


	for(uint32_t i = 0; i<10;i++)
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	e00a      	b.n	8000298 <DMA1_Stream2_IRQHandler+0x58>
		tx_buff[i] = rx_buff[i];
 8000282:	4a1b      	ldr	r2, [pc, #108]	; (80002f0 <DMA1_Stream2_IRQHandler+0xb0>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800028a:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <DMA1_Stream2_IRQHandler+0xb4>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = 0; i<10;i++)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3301      	adds	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b09      	cmp	r3, #9
 800029c:	d9f1      	bls.n	8000282 <DMA1_Stream2_IRQHandler+0x42>

	SPI3->CR2 |= SPI_CR2_RXDMAEN;
 800029e:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	6053      	str	r3, [r2, #4]

	DMA1_Stream2->CR |= DMA_SxCR_EN;
 80002aa:	4b13      	ldr	r3, [pc, #76]	; (80002f8 <DMA1_Stream2_IRQHandler+0xb8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a12      	ldr	r2, [pc, #72]	; (80002f8 <DMA1_Stream2_IRQHandler+0xb8>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR |= DMA_SxCR_EN;
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <DMA1_Stream2_IRQHandler+0xbc>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a10      	ldr	r2, [pc, #64]	; (80002fc <DMA1_Stream2_IRQHandler+0xbc>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]

	SPI3->CR2 |= SPI_CR2_TXDMAEN;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 80002c8:	f043 0302 	orr.w	r3, r3, #2
 80002cc:	6053      	str	r3, [r2, #4]

	SPI3->CR1 |= SPI_CR1_SPE;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <DMA1_Stream2_IRQHandler+0xa8>)
 80002d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40003c00 	.word	0x40003c00
 80002ec:	40026000 	.word	0x40026000
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	20000030 	.word	0x20000030
 80002f8:	40026040 	.word	0x40026040
 80002fc:	40026088 	.word	0x40026088

08000300 <main>:

int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN |
 8000304:	4b3b      	ldr	r3, [pc, #236]	; (80003f4 <main+0xf4>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a3a      	ldr	r2, [pc, #232]	; (80003f4 <main+0xf4>)
 800030a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030e:	f043 030d 	orr.w	r3, r3, #13
 8000312:	6313      	str	r3, [r2, #48]	; 0x30
					RCC_AHB1ENR_GPIODEN |
					RCC_AHB1ENR_GPIOAEN |
					RCC_AHB1ENR_DMA1EN;
	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8000314:	4b37      	ldr	r3, [pc, #220]	; (80003f4 <main+0xf4>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000318:	4a36      	ldr	r2, [pc, #216]	; (80003f4 <main+0xf4>)
 800031a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800031e:	6413      	str	r3, [r2, #64]	; 0x40


	GPIOC->AFR[1] |= 6 << (10*4-32);
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <main+0xf8>)
 8000322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000324:	4a34      	ldr	r2, [pc, #208]	; (80003f8 <main+0xf8>)
 8000326:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800032a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOC->AFR[1] |= 6 << (11*4-32);
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <main+0xf8>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000330:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <main+0xf8>)
 8000332:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000336:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOC->AFR[1] |= 6 << (12*4-32);
 8000338:	4b2f      	ldr	r3, [pc, #188]	; (80003f8 <main+0xf8>)
 800033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033c:	4a2e      	ldr	r2, [pc, #184]	; (80003f8 <main+0xf8>)
 800033e:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 8000342:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[0] |= 6 << (4*4);
 8000344:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <main+0xfc>)
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	4a2c      	ldr	r2, [pc, #176]	; (80003fc <main+0xfc>)
 800034a:	f443 23c0 	orr.w	r3, r3, #393216	; 0x60000
 800034e:	6213      	str	r3, [r2, #32]

	GPIOD->MODER |= 1 << 2*2;
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <main+0x100>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a2a      	ldr	r2, [pc, #168]	; (8000400 <main+0x100>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 2 << 10*2 |
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <main+0xf8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a25      	ldr	r2, [pc, #148]	; (80003f8 <main+0xf8>)
 8000362:	f043 7328 	orr.w	r3, r3, #44040192	; 0x2a00000
 8000366:	6013      	str	r3, [r2, #0]
					2 << 11*2 |
					2 << 12*2;
	GPIOA->MODER |= 2 << 4*2;
 8000368:	4b24      	ldr	r3, [pc, #144]	; (80003fc <main+0xfc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a23      	ldr	r2, [pc, #140]	; (80003fc <main+0xfc>)
 800036e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000372:	6013      	str	r3, [r2, #0]


	SPI3->CR1 = SPI_CR1_DFF |
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <main+0x104>)
 8000376:	f640 0218 	movw	r2, #2072	; 0x818
 800037a:	601a      	str	r2, [r3, #0]
				SPI_CR1_BR_0 |
				SPI_CR1_BR_1;

	DMA1_Stream2->PAR = (uint32_t)&SPI3->DR;
 800037c:	4b22      	ldr	r3, [pc, #136]	; (8000408 <main+0x108>)
 800037e:	4a23      	ldr	r2, [pc, #140]	; (800040c <main+0x10c>)
 8000380:	609a      	str	r2, [r3, #8]
	DMA1_Stream2->M0AR = (uint32_t)&rx_buff;
 8000382:	4b21      	ldr	r3, [pc, #132]	; (8000408 <main+0x108>)
 8000384:	4a22      	ldr	r2, [pc, #136]	; (8000410 <main+0x110>)
 8000386:	60da      	str	r2, [r3, #12]
	DMA1_Stream2->NDTR = (uint32_t)10;
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <main+0x108>)
 800038a:	220a      	movs	r2, #10
 800038c:	605a      	str	r2, [r3, #4]

	DMA1_Stream2->CR = DMA_SxCR_MINC |
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <main+0x108>)
 8000390:	f642 4210 	movw	r2, #11280	; 0x2c10
 8000394:	601a      	str	r2, [r3, #0]
					   DMA_SxCR_PSIZE_0 |
					   DMA_SxCR_TCIE |
					   DMA_SxCR_MSIZE_0;

	DMA1_Stream5->PAR = (uint32_t)&SPI3->DR;
 8000396:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <main+0x114>)
 8000398:	4a1c      	ldr	r2, [pc, #112]	; (800040c <main+0x10c>)
 800039a:	609a      	str	r2, [r3, #8]
	DMA1_Stream5->M0AR = (uint32_t)&tx_buff;
 800039c:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <main+0x114>)
 800039e:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <main+0x118>)
 80003a0:	60da      	str	r2, [r3, #12]
	DMA1_Stream5->NDTR = (uint32_t)10;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <main+0x114>)
 80003a4:	220a      	movs	r2, #10
 80003a6:	605a      	str	r2, [r3, #4]

	DMA1_Stream5->CR = DMA_SxCR_MINC |
 80003a8:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <main+0x114>)
 80003aa:	f44f 5231 	mov.w	r2, #11328	; 0x2c40
 80003ae:	601a      	str	r2, [r3, #0]
					   DMA_SxCR_DIR_0 |
					   DMA_SxCR_PSIZE_0 |
					   DMA_SxCR_MSIZE_0;

	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80003b0:	200d      	movs	r0, #13
 80003b2:	f7ff ff27 	bl	8000204 <__NVIC_EnableIRQ>


	SPI3->CR2 |= SPI_CR2_RXDMAEN;
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <main+0x104>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <main+0x104>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6053      	str	r3, [r2, #4]

	DMA1_Stream2->CR |= DMA_SxCR_EN;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <main+0x108>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a10      	ldr	r2, [pc, #64]	; (8000408 <main+0x108>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6013      	str	r3, [r2, #0]
	DMA1_Stream5->CR |= DMA_SxCR_EN;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <main+0x114>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <main+0x114>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6013      	str	r3, [r2, #0]

	SPI3->CR2 |= SPI_CR2_TXDMAEN;
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <main+0x104>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	4a09      	ldr	r2, [pc, #36]	; (8000404 <main+0x104>)
 80003e0:	f043 0302 	orr.w	r3, r3, #2
 80003e4:	6053      	str	r3, [r2, #4]

	SPI3->CR1 |= SPI_CR1_SPE;
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <main+0x104>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a06      	ldr	r2, [pc, #24]	; (8000404 <main+0x104>)
 80003ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f0:	6013      	str	r3, [r2, #0]




    /* Loop forever */
	for(;;);
 80003f2:	e7fe      	b.n	80003f2 <main+0xf2>
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020800 	.word	0x40020800
 80003fc:	40020000 	.word	0x40020000
 8000400:	40020c00 	.word	0x40020c00
 8000404:	40003c00 	.word	0x40003c00
 8000408:	40026040 	.word	0x40026040
 800040c:	40003c0c 	.word	0x40003c0c
 8000410:	2000001c 	.word	0x2000001c
 8000414:	40026088 	.word	0x40026088
 8000418:	20000030 	.word	0x20000030

0800041c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000420:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <LoopForever+0x6>)
  ldr r1, =_edata
 8000426:	490d      	ldr	r1, [pc, #52]	; (800045c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <LoopForever+0xe>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800042c:	e002      	b.n	8000434 <LoopCopyDataInit>

0800042e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000432:	3304      	adds	r3, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000438:	d3f9      	bcc.n	800042e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043a:	4a0a      	ldr	r2, [pc, #40]	; (8000464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800043c:	4c0a      	ldr	r4, [pc, #40]	; (8000468 <LoopForever+0x16>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000440:	e001      	b.n	8000446 <LoopFillZerobss>

08000442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000444:	3204      	adds	r2, #4

08000446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000448:	d3fb      	bcc.n	8000442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044a:	f000 f811 	bl	8000470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044e:	f7ff ff57 	bl	8000300 <main>

08000452 <LoopForever>:

LoopForever:
    b LoopForever
 8000452:	e7fe      	b.n	8000452 <LoopForever>
  ldr   r0, =_estack
 8000454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000460:	080004d8 	.word	0x080004d8
  ldr r2, =_sbss
 8000464:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000468:	20000044 	.word	0x20000044

0800046c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>
	...

08000470 <__libc_init_array>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	4d0d      	ldr	r5, [pc, #52]	; (80004a8 <__libc_init_array+0x38>)
 8000474:	4c0d      	ldr	r4, [pc, #52]	; (80004ac <__libc_init_array+0x3c>)
 8000476:	1b64      	subs	r4, r4, r5
 8000478:	10a4      	asrs	r4, r4, #2
 800047a:	2600      	movs	r6, #0
 800047c:	42a6      	cmp	r6, r4
 800047e:	d109      	bne.n	8000494 <__libc_init_array+0x24>
 8000480:	4d0b      	ldr	r5, [pc, #44]	; (80004b0 <__libc_init_array+0x40>)
 8000482:	4c0c      	ldr	r4, [pc, #48]	; (80004b4 <__libc_init_array+0x44>)
 8000484:	f000 f818 	bl	80004b8 <_init>
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	2600      	movs	r6, #0
 800048e:	42a6      	cmp	r6, r4
 8000490:	d105      	bne.n	800049e <__libc_init_array+0x2e>
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f855 3b04 	ldr.w	r3, [r5], #4
 8000498:	4798      	blx	r3
 800049a:	3601      	adds	r6, #1
 800049c:	e7ee      	b.n	800047c <__libc_init_array+0xc>
 800049e:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a2:	4798      	blx	r3
 80004a4:	3601      	adds	r6, #1
 80004a6:	e7f2      	b.n	800048e <__libc_init_array+0x1e>
 80004a8:	080004d0 	.word	0x080004d0
 80004ac:	080004d0 	.word	0x080004d0
 80004b0:	080004d0 	.word	0x080004d0
 80004b4:	080004d4 	.word	0x080004d4

080004b8 <_init>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	bf00      	nop
 80004bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004be:	bc08      	pop	{r3}
 80004c0:	469e      	mov	lr, r3
 80004c2:	4770      	bx	lr

080004c4 <_fini>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr
